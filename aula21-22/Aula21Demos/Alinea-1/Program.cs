using System;
using System.Linq;
using System.Reflection;

/* Exemplo: Série 2 de Verão 2014/2015
    https://adeetc.thothapp.com/classes/AVE/1516v/LI42D/resources/8291
*/
namespace Alinea_1
{
    /* not used in the code.
       just to demonstrate the type of code generated by the 
       C# compiler when using lambda functions.
    */
    class AndThenType<T, W, Z>
    {
        private Func<W, Z> after;
        private Func<T, W> self;

        public AndThenType(
            Func<T, W> self,
            Func<W, Z> after)
        {
            this.self = self;
            this.after = after;
        }
        public Z M(T x)
        {
            return after(self(x));
        }
    }
    public static class ExtensionMethods {
        public static Func<T, Rafter> AndThen<T, Rself, Rafter>(
                                this Func<T, Rself> self,
                                Func<Rself, Rafter> after)
        {
            return x => after(self(x));
            /*
            AndThenType<T, Rself, Rafter> at =
                new AndThenType<T, Rself, Rafter>(self, after);
            return new Func<T, Rafter>(at.M);
            */
        }
    }
    class Program
    {
        public static Func<T,T> ChainMethods<T>(string path)
        {
            Func<T, T> chain = null;
            Assembly asm = Assembly.LoadFrom(path);
            foreach(Type t in asm.GetTypes())
            {
                foreach(MethodInfo mi in t.GetMethods(BindingFlags.Static|BindingFlags.Public))
                {
                    ParameterInfo[] pi = mi.GetParameters();
                    if (pi.Length==1 && 
                        pi[0].ParameterType == typeof(T) && 
                        mi.ReturnType == typeof(T))
                    {
                        /*
                        Func<T, T> w = new Func<T, T>(M);
                        // <=>
                        Func<T, T> w2 = M;
                        */
                        Func<T, T> m;
                            //= x => (T) mi.Invoke(null, new object[] { x });
                        m = (Func<T,T>)
                            Delegate.CreateDelegate(typeof(Func<T, T>), mi);
                        if (chain == null)
                        {
                            chain = m;
                        } else
                        {
                            chain = chain.AndThen(m);
                        }
                        
                    }
                }
            }
            return chain;
        }

        /* not used in the example. 
           just to demonstrate language sintax.
        */
        public static W M<W>(W i) { return i; }
        
        static int[] measurer(String[] words)
        {
            return words.Select(w => w.Length).ToArray();
        }

        static int sum(int[] nrs)
        {
            return nrs.Aggregate((prev, curr) => prev + curr);
        }
        static void Main(string[] args)
        {
            Func<String, String[]> splitter = 
                line => line.Split(' ');
            Func<String, int> nrOfChars = 
                splitter
                .AndThen(measurer)
                .AndThen(sum);
            String src = "Phasellus quam turpis feugiat sit amet ornare in";
            Console.WriteLine(nrOfChars(src)); // 41

            double[] a1 = { 16, 25 };
            Func<double[], double[]> f = 
                ChainMethods<double[]>(@"E:\work\ISEL\Ensino\AVE\1516v\ave-2015-16-sem2-i42d\aula21\Aula21Demos\Utils\bin\Debug\ArrayUtils.dll");
            double[] res = f(a1); // res = {64, 100}
        }
    }
}
